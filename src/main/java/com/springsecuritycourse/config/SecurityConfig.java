package com.springsecuritycourse.config;

import com.springsecuritycourse.config.customaccessdecisionvotersconfig.LockedUsers;
import com.springsecuritycourse.dao.UserDao;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.security.access.AccessDecisionManager;
import org.springframework.security.access.AccessDecisionVoter;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.access.intercept.RunAsImplAuthenticationProvider;
import org.springframework.security.access.method.MapBasedMethodSecurityMetadataSource;
import org.springframework.security.access.method.MethodSecurityMetadataSource;
import org.springframework.security.access.vote.AuthenticatedVoter;
import org.springframework.security.access.vote.RoleVoter;
import org.springframework.security.access.vote.UnanimousBased;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.access.expression.WebExpressionVoter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import java.util.*;

@Configuration
@Import({ RootConfig.class })
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	UserDetailsService userDetailsService;

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
//		inMemoryAuthentication().
//		withUser("user").
//		password("1234").
//		roles("USER");


//		auth.authenticationProvider(runAsAuthenticationProvider());
		auth.authenticationProvider(daoAuthenticationProvider());
	}

	@Override
	public void configure(HttpSecurity http) throws Exception {
		http
		.authorizeRequests()
			.antMatchers("/signup","/user/registration","/user/registrationtest","/confirmRegistration").permitAll()

//			--------------------------------------------------------------------------------------------------------------------------
//			URL Authorization with expressions
//			.antMatchers("/secured").access("hasRole('USER')")
//			.antMatchers("/secured").access("hasAuthority('ROLE_ADMIN')")
//
//			.antMatchers("/secured").hasIpAddress("192.168.1.2/24")
//			.antMatchers("/secured").access("hasIpAddress('192.168.1.2/24')")
//			.antMatchers("/secured").not().access("hasIpAddress('192.168.1.2/24')") //.not()
//			.antMatchers("/secured").access("hasIpAddress('::1')") //localhost
//
//			.antMatchers("/secured").anonymous() // ~ permitALl()
//			.antMatchers("/secured").access("isAnonymous()")
//
//			.antMatchers("/secured").access("request.method == 'GET'")
//
//			.antMatchers("/secured").access("hasRole('USER') and principal.username == 'user'") //combined expression (and,or)
//			--------------------------------------------------------------------------------------------------------------------------

            .antMatchers("/secured").access("hasRole('ADMIN')")

                // custom access decisin voter
//            .anyRequest().authenticated().accessDecisionManager(unanimous())
			.anyRequest().authenticated()

				//URL AUTHORIZATION M1L3

//		.antMatchers("/delete/**").hasRole("ADMIN") //with autogenerated "ROLE_" prefix
//		.antMatchers("/delete/**").hasAuthority("ADMIN")
//		.antMatchers("/delete/**").hasAnyAuthority("ADMIN","ADMIN2")

		.and()
		.formLogin()
			.loginPage("/login").permitAll()
			.loginProcessingUrl("/doLogin")
			.failureUrl("/login?login_error=1")
			.defaultSuccessUrl("/welcome",true)
		.and()
//			.logout().permitAll().logoutUrl("/doLogout")
			.logout().permitAll().logoutRequestMatcher(new AntPathRequestMatcher("/doLogout", "POST"))
				.clearAuthentication(true)
				.invalidateHttpSession(true)
				.deleteCookies()
				.logoutSuccessUrl("/login")
//				.logoutSuccessHandler() programatically run some extra login by logout
		.and()
		.csrf().disable();

//		.and()
//		.httpBasic();
//		https://www.mkyong.com/java/javamail-api-sending-email-via-gmail-smtp-example/
	}

	@Bean
	public AuthenticationProvider runAsAuthenticationProvider() {
		RunAsImplAuthenticationProvider authenticationProvider = new RunAsImplAuthenticationProvider();
		authenticationProvider.setKey("MyRunAsKey");
		return authenticationProvider;
	}

	@Bean
	public AuthenticationProvider daoAuthenticationProvider() {
		DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
		authenticationProvider.setPasswordEncoder(passwordEncoder());
		authenticationProvider.setUserDetailsService(userDetailsService);
		return authenticationProvider;
	}

	//--------------------------------------------------------
	//----------------- custom method (global) security config
    //--------------------------------------------------------
//    @EnableGlobalMethodSecurity(prePostEnabled = true)
//    public static class MethodSecurityConfig extends GlobalMethodSecurityConfiguration {
//        @Override
//        public MethodSecurityMetadataSource customMethodSecurityMetadataSource() {
//            Map<String, List<ConfigAttribute>> methodMap = new HashMap<String, List<ConfigAttribute>>();
//            methodMap.put(
//                    "com.springsecuritycourse.controller.RegistrationController.confirmRegistration*",
//                    org.springframework.security.access.SecurityConfig.createList("ROLE_ADMIN"));
//            return new MapBasedMethodSecurityMetadataSource(methodMap);
//        }
//    }
    //--------------------------------------------------------


    //--------------------------------------------------------
    //----------------- custom access decision voter
    //--------------------------------------------------------
	@Bean
	public AccessDecisionManager unanimous(){
		List<AccessDecisionVoter<? extends Object>> voters = new ArrayList<AccessDecisionVoter<? extends Object>>();
        voters.add(new RoleVoter());
        voters.add(new AuthenticatedVoter());
        voters.add(new RealTimeLockVoter());
        voters.add(new WebExpressionVoter());
		return new UnanimousBased(voters);
	}
    //--------------------------------------------------------


	//Password encoding with built-in salt

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder(12);
	}

    //--------------------------------------------------------
    //----------------- custom access decision voter
    //--------------------------------------------------------
    class RealTimeLockVoter implements AccessDecisionVoter<Object> {

        @Override
        public boolean supports(ConfigAttribute configAttribute) {
            return true;
        }

        @Override
        public boolean supports(Class<?> aClass) {
            return true;
        }

        @Override
        public int vote(Authentication authentication, Object o, Collection<ConfigAttribute> collection) {
            if (LockedUsers.isLocked(authentication.getName())) {
                return ACCESS_DENIED;
            }
            return ACCESS_GRANTED;
        }
    }
}
